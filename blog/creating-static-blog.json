{"title":"Creating static blog with Sapper, TailwindCSS and Github pages","description":"How to create static blog with Svelte 3, Sapper, TailwindCSS and deploy Github pages - introduction","slug":"creating-static-blog","html":"<p>Static websites became very popular lasy years. Tools like <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://www.gatsbyjs.org/\">GatsbyJS</a> and <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://jekyllrb.com/\">Jekyll</a> exist for some time. However, I decided to try something different and kinda underground - recently released <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://svelte.dev\">Svelte 3</a> with <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://sapper.svelte.dev\">Sapper</a>.</p>\n<h2 id=\"what-is-sapper\">What is Sapper</h2>\n<p><code>Sapper</code> is web app framework powered by <code>Svelte</code>. It is inspired by <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://github.com/zeit/next.js\">Next.js</a> - a framework for <code>React</code>, but, as it&#39;s creator states, is much more lightweight and faster. You can read more at <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://sapper.svelte.dev/\">https://sapper.svelte.dev/</a>.</p>\n<h2 id=\"what-is-tailwindcss\">What is TailwindCSS</h2>\n<p><a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://tailwindcss.com/\">Tailwind</a> is a A utility-first CSS framework. Utility-first means that there aren&#39;t any prebuilt UI components, like it is in <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://getbootstrap.com/\">Bootstrap</a>. Instead, Tailwind provides utility classes:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.absolute</span> {\n  <span class=\"hljs-attribute\">posiion</span>: absolute;\n}\n\n<span class=\"hljs-selector-class\">.uppercase</span> {\n  <span class=\"hljs-attribute\">text-transform</span>: uppercase;\n}</code></pre><p>In my opinion, this approach goes wery well with <code>Svelte</code>, because both tools focus on resulting bundle size and final performance.</p>\n<h2 id=\"about-this-tutorial\">About this tutorial</h2>\n<p>This tutorial will be splitted into following parts:</p>\n<ol>\n<li>Project scaffolding and adding support for <code>markdown</code> and syntax highlight to content</li>\n<li>Styling with <code>Taildwind</code> and <code>PostCSS</code></li>\n<li>Adding categories for blog posts</li>\n<li>Testing</li>\n<li>Deploying to Github pages</li>\n</ol>\n<h2 id=\"getting-started\">Getting started</h2>\n<p>First, clone sapper project template:</p>\n<pre><code class=\"hljs language-bash\">npx degit <span class=\"hljs-string\">\"sveltejs/sapper-template#rollup\"</span> sapper-blog-tutorial</code></pre><p>For those who prefer webpack, there is another option <code>npx degit &quot;sveltejs/sapper-template#webpack&quot; sapper-blog-tutorial</code>, but we will use rollup.</p>\n<p>Then, to install required dependencies run:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cd</span> sapper-blog-tutorial/ &amp;&amp; yarn</code></pre><p>For now, as we can see in <code>src/routes/blog/_posts.js</code>, our blog posts are just an array:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// src/routes/blog/_posts.js</span>\n\n<span class=\"hljs-keyword\">const</span> posts = [\n    {\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'What is Sapper?'</span>,\n        <span class=\"hljs-attr\">slug</span>: <span class=\"hljs-string\">'what-is-sapper'</span>,\n        <span class=\"hljs-attr\">html</span>: <span class=\"hljs-string\">`\n            &lt;p&gt;First, you have to know what ...\n    ...</span></code></pre><p>To add support for markdown and syntax highlight, first install required dependencies:</p>\n<pre><code class=\"hljs language-bash\">yarn add marked prismjs gray-matter reading-time</code></pre><p>Then, replace <code>src/routes/blog/_posts.js</code> file content with:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// src/routes/blog/_posts.js</span>\n\n<span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>)\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)\n<span class=\"hljs-keyword\">const</span> marked = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'marked'</span>)\n<span class=\"hljs-keyword\">const</span> matter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'gray-matter'</span>)\n<span class=\"hljs-keyword\">const</span> readingTime = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'reading-time'</span>)\n<span class=\"hljs-keyword\">const</span> prism = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'prismjs'</span>)\n\n<span class=\"hljs-keyword\">const</span> cwd = process.cwd()\n<span class=\"hljs-keyword\">const</span> POSTS_DIR = path.join(cwd, <span class=\"hljs-string\">'src/routes/blog/posts/'</span>)\n<span class=\"hljs-keyword\">const</span> EXCERPT_SEPARATOR = <span class=\"hljs-string\">'&lt;!-- more --&gt;'</span>\n<span class=\"hljs-keyword\">const</span> renderer = <span class=\"hljs-keyword\">new</span> marked.Renderer()\n\n<span class=\"hljs-keyword\">const</span> linkRenderer = renderer.link\nrenderer.link = <span class=\"hljs-function\">(<span class=\"hljs-params\">href, title, text</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> html = linkRenderer.call(renderer, href, title, text)\n\n  <span class=\"hljs-keyword\">if</span> (href.indexOf(<span class=\"hljs-string\">'/'</span>) === <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">return</span> html\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (href.indexOf(<span class=\"hljs-string\">'#'</span>) === <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">const</span> html = linkRenderer.call(renderer, <span class=\"hljs-string\">'javascript:;'</span>, title, text)\n    <span class=\"hljs-keyword\">return</span> html.replace(\n      <span class=\"hljs-regexp\">/^&lt;a /</span>,\n      <span class=\"hljs-string\">`&lt;a onclick=\"document.location.hash='<span class=\"hljs-subst\">${href.substr(<span class=\"hljs-number\">1</span>)}</span>';\" `</span>\n    )\n  }\n\n  <span class=\"hljs-keyword\">return</span> html.replace(<span class=\"hljs-regexp\">/^&lt;a /</span>, <span class=\"hljs-string\">'&lt;a target=\"_blank\" rel=\"nofollow\" '</span>)\n}\n\nrenderer.code = <span class=\"hljs-function\">(<span class=\"hljs-params\">code, language</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> parser = prism.languages[language] || prism.languages.html\n  <span class=\"hljs-keyword\">const</span> highlighted = prism.highlight(code, parser, language)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`&lt;pre class=\"language-<span class=\"hljs-subst\">${language}</span>\"&gt;&lt;code class=\"language-<span class=\"hljs-subst\">${language}</span>\"&gt;<span class=\"hljs-subst\">${highlighted}</span>&lt;/code&gt;&lt;/pre&gt;`</span>\n}\n\nmarked.setOptions({\n  renderer,\n  <span class=\"hljs-attr\">highlight</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">code, lang</span>) </span>{\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">return</span> prismjs.highlight(code, prismjs.languages[lang], lang)\n    } <span class=\"hljs-keyword\">catch</span> {\n      <span class=\"hljs-keyword\">return</span> code\n    }\n  },\n})\n\n<span class=\"hljs-keyword\">const</span> posts = fs\n  .readdirSync(POSTS_DIR)\n  .filter(<span class=\"hljs-function\"><span class=\"hljs-params\">fileName</span> =&gt;</span> <span class=\"hljs-regexp\">/\\.md$/</span>.test(fileName))\n  .map(<span class=\"hljs-function\"><span class=\"hljs-params\">fileName</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> fileMd = fs.readFileSync(path.join(POSTS_DIR, fileName), <span class=\"hljs-string\">'utf8'</span>)\n    <span class=\"hljs-keyword\">const</span> { data, <span class=\"hljs-attr\">content</span>: rawContent } = matter(fileMd)\n    <span class=\"hljs-keyword\">const</span> { title, description, created, updated } = data\n    <span class=\"hljs-keyword\">const</span> slug = fileName.split(<span class=\"hljs-string\">'.'</span>)[<span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-keyword\">let</span> content = rawContent\n    <span class=\"hljs-keyword\">let</span> excerpt = <span class=\"hljs-string\">''</span>\n\n    <span class=\"hljs-keyword\">if</span> (rawContent.indexOf(EXCERPT_SEPARATOR) !== <span class=\"hljs-number\">-1</span>) {\n      excerpt = marked(rawContent.split(EXCERPT_SEPARATOR)[<span class=\"hljs-number\">0</span>])\n    }\n\n    <span class=\"hljs-keyword\">const</span> html = marked.parse(content.replace(EXCERPT_SEPARATOR, <span class=\"hljs-string\">''</span>))\n    <span class=\"hljs-keyword\">const</span> time = readingTime(content).text\n\n    <span class=\"hljs-keyword\">return</span> {\n      title,\n      description,\n      slug,\n      html,\n      created,\n      updated,\n      excerpt,\n      <span class=\"hljs-attr\">readingTime</span>: time,\n    }\n  })\n\nposts.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> dateA = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(a.created)\n  <span class=\"hljs-keyword\">const</span> dateB = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(b.created)\n\n  <span class=\"hljs-keyword\">if</span> (dateA &gt; dateB) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n  <span class=\"hljs-keyword\">if</span> (dateA &lt; dateB) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n})\n\nposts.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">post</span> =&gt;</span> {\n  post.html = post.html.replace(<span class=\"hljs-regexp\">/^\\t{3}/gm</span>, <span class=\"hljs-string\">''</span>)\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> posts</code></pre><p>I will explain what is going on now. First, we are importing dependencies, of course. Then we are defining directory, where our <code>.md</code> files will be located, and excerpt separator, to be able to create excerpt for posts.</p>\n<p>Later, we create different markdown renderers. First - link renderer would transform all links with <code>#</code> symbol, so they link to <code>h</code> elements in our post. Link renderer also adds <code>target=&quot;_blank&quot; rel=&quot;nofollow&quot;</code> to all outgoing links.</p>\n<p>Then goes the part with code renderer which uses <code>prismjs</code> to parse and highlight code blocks.</p>\n<p>After that, at line <code>129</code> we define our <code>posts</code> array. <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://www.npmjs.com/package/gray-matter\">gray-mater</a> allows our markdown files to contain meta information for our posts, like title, description, creation date and other whatever you want. I am sure you can understand what info I am storing with my posts.</p>\n<p>Last, we sort posts by date and exporting them.</p>\n<p>We also need to modify <code>src/routes/blog/index.json.js</code> posts mapping, to include added post information:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> contents = <span class=\"hljs-built_in\">JSON</span>.stringify(\n  posts.map(<span class=\"hljs-function\"><span class=\"hljs-params\">post</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">title</span>: post.title,\n      <span class=\"hljs-attr\">slug</span>: post.slug,\n      <span class=\"hljs-attr\">created</span>: post.created,\n      <span class=\"hljs-attr\">excerpt</span>: post.excerpt,\n    }\n  })\n)</code></pre><p>Next file we need to modify is <code>rollup.config.js</code>. Add this line somewhere at the top with other imports:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> marked <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'marked'</span></code></pre><p>Then, before <code>export default ...</code> add:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> markdown = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> ({\n  transform(md, id) {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/\\.md$/</span>.test(id)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">const</span> data = marked(md)\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">`export default <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">JSON</span>.stringify(data.toString())}</span>;`</span>,\n    }\n  },\n})</code></pre><p>And finally, in <code>server</code> part of the exported config, after <code>commonjs(),</code> add:</p>\n<pre><code class=\"hljs language-javascript\">markdown(),</code></pre><p>Final config would look like <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://github.com/chuvikovd/sapper-blog-tutorial/blob/186813bd861bba59a0baa4109e09c3495f7c5144/rollup.config.js\">this</a>.</p>\n<p>Now it is time to add first <code>markdown</code> post. Create file <code>src/routes/blog/posts/hello-world.md</code> with the following content:</p>\n<pre><code class=\"hljs language-markdown\">---\ntitle: Hello World\ndescription: First post in this blog\n<span class=\"hljs-section\">created: '2020-01-11T19:45:28.107Z'\n---</span>\n\nThis is excerpt.\n\n<span class=\"xml\"><span class=\"hljs-comment\">&lt;!-- more --&gt;</span></span>\n\n<span class=\"hljs-section\"># Heading</span>\n\nThis is the first post in this blog.</code></pre><p>Now run:</p>\n<pre><code class=\"hljs language-bash\">yarn dev</code></pre><p>and go to <code>http://localhost:3000/blog</code>. You can see that our newly created post is showing in the list and we are able to open it. As you can see, markdown renderer is working. Feel free to write more complex markdown. If you do so, you will notice that syntax highlighting is not working yet - don&#39;t worry, we will fix that in second part of this tutorial series.</p>\n<p>Thats it for now. You can view the whole project at this point <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://github.com/chuvikovd/sapper-blog-tutorial/tree/186813bd861bba59a0baa4109e09c3495f7c5144\">here</a>. Stay tuned for the rest parts.</p>\n<h2 id=\"credits\">Credits</h2>\n<p><a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://github.com/Charca/sapper-blog-template/\">https://github.com/Charca/sapper-blog-template/</a> - inspiration for markdown renderer</p>\n","created":"2020-01-13T20:33:22.846Z","updated":"2020-01-19T12:53:10.490Z","excerpt":"<p>Static websites became very popular lasy years. Tools like <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://www.gatsbyjs.org/\">GatsbyJS</a> and <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://jekyllrb.com/\">Jekyll</a> exist for some time. However, I decided to try something different and kinda underground - recently released <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://svelte.dev\">Svelte 3</a> with <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://sapper.svelte.dev\">Sapper</a>.</p>\n","categories":["Svelte","Sapper"],"time":"5 min read"}