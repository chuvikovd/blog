{"title":"Creating static blog with Sapper, TailwindCSS and Github pages","description":"How to create static blog with Svelte 3, Sapper, TailwindCSS and deploy Github pages","slug":"creating-static-blog","html":"<p>Static websites became very popular lasy years. Tools like <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://www.gatsbyjs.org/\">GatsbyJS</a> and <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://jekyllrb.com/\">Jekyll</a> exist for some time. However, I decided to try something different and kinda underground - recently released <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://svelte.dev\">Svelte 3</a> with <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://sapper.svelte.dev\">Sapper</a>.</p>\n<h2 id=\"what-is-sapper\">What is Sapper</h2>\n<p><code>Sapper</code> is web app framework powered by <code>Svelte</code>. It is inspired by <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://github.com/zeit/next.js\">Next.js</a> - a framework for <code>React</code>, but, as it&#39;s creator states, is much more lightweight and faster. You can read more at <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://sapper.svelte.dev/\">https://sapper.svelte.dev/</a>.</p>\n<h2 id=\"what-is-tailwindcss\">What is TailwindCSS</h2>\n<p><a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://tailwindcss.com/\">Tailwind</a> is a A utility-first CSS framework. Utility-first means that there aren&#39;t any prebuilt UI components, like it is in <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://getbootstrap.com/\">Bootstrap</a>. Instead, Tailwind provides utility classes:</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.absolute</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">posiion</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.uppercase</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">text-transform</span><span class=\"token punctuation\">:</span> uppercase<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre><p>In my opinion, this approach goes wery well with <code>Svelte</code>, because both tools focus on resulting bundle size and final performance.</p>\n<h2 id=\"about-this-tutorial\">About this tutorial</h2>\n<p>This tutorial will be splitted into following parts:</p>\n<ol>\n<li>Project scaffolding and adding support for <code>markdown</code> and syntax highlight to content</li>\n<li>Styling with <code>Taildwind</code> and <code>PostCSS</code></li>\n<li>Adding categories for blog posts</li>\n<li>Testing</li>\n<li>Deploying to Github pages</li>\n</ol>\n<h2 id=\"getting-started\">Getting started</h2>\n<p>First, clone sapper project template:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">npx degit \"sveltejs/sapper-template#rollup\" sapper-blog-tutorial</code></pre><p>For those who prefer webpack, there is another option <code>npx degit &quot;sveltejs/sapper-template#webpack&quot; sapper-blog-tutorial</code>, but we will use rollup.</p>\n<p>Then, to install required dependencies run:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">cd sapper-blog-tutorial/ &amp;&amp; yarn</code></pre><p>For now, as we can see in <code>src/routes/blog/_posts.js</code>, our blog posts are just an array:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// srt/routes/blog/_posts.js</span>\n\n<span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        title<span class=\"token operator\">:</span> <span class=\"token string\">'What is Sapper?'</span><span class=\"token punctuation\">,</span>\n        slug<span class=\"token operator\">:</span> <span class=\"token string\">'what-is-sapper'</span><span class=\"token punctuation\">,</span>\n        html<span class=\"token operator\">:</span> `\n            <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>First<span class=\"token punctuation\">,</span> you have to know what <span class=\"token operator\">...</span>\n    <span class=\"token operator\">...</span></code></pre><p>To add support for markdown and syntax highlight, first install required dependencies:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">yarn add marked prismjs gray-matter reading-time</code></pre><p>Then, replace <code>src/routes/blog/_posts.js</code> file content with:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/routes/blog/_posts.js</span>\n\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> marked <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'marked'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> matter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gray-matter'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> readingTime <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reading-time'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> prism <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'prismjs'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> cwd <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">POSTS_DIR</span> <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>cwd<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/routes/blog/posts/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">EXCERPT_SEPARATOR</span> <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;!-- more -->'</span>\n<span class=\"token keyword\">const</span> renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">marked<span class=\"token punctuation\">.</span>Renderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> linkRenderer <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span>link\nrenderer<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">link</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">href<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token function\">linkRenderer</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>renderer<span class=\"token punctuation\">,</span> href<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>href<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> html\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>href<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token function\">linkRenderer</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>renderer<span class=\"token punctuation\">,</span> <span class=\"token string\">'javascript:;'</span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> html<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>\n      <span class=\"token regex\">/^&lt;a /</span><span class=\"token punctuation\">,</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;a onclick=\"document.location.hash='</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>href<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">';\" </span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> html<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/^&lt;a /</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;a target=\"_blank\" rel=\"nofollow\" '</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nrenderer<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">code</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">code<span class=\"token punctuation\">,</span> language</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> parser <span class=\"token operator\">=</span> prism<span class=\"token punctuation\">.</span>languages<span class=\"token punctuation\">[</span>language<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> prism<span class=\"token punctuation\">.</span>languages<span class=\"token punctuation\">.</span>html\n  <span class=\"token keyword\">const</span> highlighted <span class=\"token operator\">=</span> prism<span class=\"token punctuation\">.</span><span class=\"token function\">highlight</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> parser<span class=\"token punctuation\">,</span> language<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;pre class=\"language-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>language<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\">&lt;code class=\"language-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>language<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>highlighted<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/code>&lt;/pre></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n\nmarked<span class=\"token punctuation\">.</span><span class=\"token function\">setOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  renderer<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">highlight</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">code<span class=\"token punctuation\">,</span> lang</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> prismjs<span class=\"token punctuation\">.</span><span class=\"token function\">highlight</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> prismjs<span class=\"token punctuation\">.</span>languages<span class=\"token punctuation\">[</span>lang<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> lang<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> code\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> fs\n  <span class=\"token punctuation\">.</span><span class=\"token function\">readdirSync</span><span class=\"token punctuation\">(</span><span class=\"token constant\">POSTS_DIR</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fileName</span> <span class=\"token operator\">=></span> <span class=\"token regex\">/\\.md$/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fileName</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fileMd <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token constant\">POSTS_DIR</span><span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> content<span class=\"token operator\">:</span> rawContent <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">matter</span><span class=\"token punctuation\">(</span>fileMd<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">,</span> created<span class=\"token punctuation\">,</span> updated <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> data\n    <span class=\"token keyword\">const</span> slug <span class=\"token operator\">=</span> fileName<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> content <span class=\"token operator\">=</span> rawContent\n    <span class=\"token keyword\">let</span> excerpt <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rawContent<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">EXCERPT_SEPARATOR</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      excerpt <span class=\"token operator\">=</span> <span class=\"token function\">marked</span><span class=\"token punctuation\">(</span>rawContent<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token constant\">EXCERPT_SEPARATOR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> marked<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token constant\">EXCERPT_SEPARATOR</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token function\">readingTime</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      title<span class=\"token punctuation\">,</span>\n      description<span class=\"token punctuation\">,</span>\n      slug<span class=\"token punctuation\">,</span>\n      html<span class=\"token punctuation\">,</span>\n      created<span class=\"token punctuation\">,</span>\n      updated<span class=\"token punctuation\">,</span>\n      excerpt<span class=\"token punctuation\">,</span>\n      readingTime<span class=\"token operator\">:</span> time<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nposts<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> dateA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> dateB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dateA <span class=\"token operator\">></span> dateB<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dateA <span class=\"token operator\">&lt;</span> dateB<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nposts<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  post<span class=\"token punctuation\">.</span>html <span class=\"token operator\">=</span> post<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/^\\t{3}/gm</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> posts</code></pre><p>I will explain what is going on now. First, we are importing dependencies, of course. Then we are defining directory, where our <code>.md</code> files will be located, and excerpt separator, to be able to create excerpt for posts.</p>\n<p>Later, we create different markdown renderers. First - link renderer would transform all links with <code>#</code> symbol, so they link to <code>h</code> elements in our post. Link renderer also adds <code>target=&quot;_blank&quot; rel=&quot;nofollow&quot;</code> to all outgoing links.</p>\n<p>Then goes the part with code renderer which uses <code>prismjs</code> to parse and highlight code blocks.</p>\n<p>After that, at line <code>129</code> we define our <code>posts</code> array. <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://www.npmjs.com/package/gray-matter\">gray-mater</a> allows our markdown files to contain meta information for our posts, like title, description, creation date and other whatever you want. I am sure you can understand what info I am storing with my posts.</p>\n<p>Last, we sort posts by date and exporting them.</p>\n<p>Next file we need to modify is <code>rollup.config.js</code>. Add this line somewhere at the top with other imports:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> marked <span class=\"token keyword\">from</span> <span class=\"token string\">'marked'</span></code></pre><p>Then, before <code>export default ...</code> add:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">markdown</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">md<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\">/\\.md$/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">marked</span><span class=\"token punctuation\">(</span>md<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">export default </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre><p>And finally, in <code>server</code> part of the exported config, after <code>commonjs(),</code> add:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">markdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></code></pre><p>Final config would look like <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://github.com/chuvikovd/sapper-blog-tutorial/blob/186813bd861bba59a0baa4109e09c3495f7c5144/rollup.config.js\">this</a>.</p>\n<p>Now it is time to add first <code>markdown</code> post. Create file <code>src/routes/blog/posts/hello-world.md</code> with the following content:</p>\n<pre class=\"language-markdown\"><code class=\"language-markdown\">---\ntitle: Hello World\ndescription: First post in this blog\ncreated: '2020-01-11T19:45:28.107Z'\n---\n\nThis is excerpt.\n\n<span class=\"token comment\">&lt;!-- more --></span>\n\n# Heading\n\nThis is the first post in this blog.</code></pre><p>Now run:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">yarn dev</code></pre><p>and go to <code>http://localhost:3000/blog</code>. You can see that our newly created post is showing in the list and we are able to open it. As you can see, markdown renderer is working. Feel free to write more complex markdown. If you do so, you will notice that syntax highlighting is not working yet - don&#39;t worry, we will fix that in second part of this tutorial series.</p>\n<p>Thats it for now. You can view the whole project at this point <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://github.com/chuvikovd/sapper-blog-tutorial/tree/186813bd861bba59a0baa4109e09c3495f7c5144\">here</a>. Stay tuned for the rest parts.</p>\n<h2 id=\"credits\">Credits</h2>\n<p><a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://github.com/Charca/sapper-blog-template/\">https://github.com/Charca/sapper-blog-template/</a> - inspiration for markdown renderer</p>\n","created":"2020-01-13T20:33:22.846Z","updated":"2020-01-16T18:08:37.291Z","excerpt":"<p>Static websites became very popular lasy years. Tools like <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://www.gatsbyjs.org/\">GatsbyJS</a> and <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://jekyllrb.com/\">Jekyll</a> exist for some time. However, I decided to try something different and kinda underground - recently released <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://svelte.dev\">Svelte 3</a> with <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://sapper.svelte.dev\">Sapper</a>.</p>\n","categories":["Svelte","Sapper"],"time":"5 min read"}