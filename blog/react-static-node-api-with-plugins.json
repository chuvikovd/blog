{"title":"React-Static using node.api.js with 3rd party plugins","description":"How to work with node.api.js file inside React-Static while using third party plugins that modify webpack loaders","slug":"react-static-node-api-with-plugins","html":"<p>Today I faced an issue, using <code>React-Static</code>. Issue is clearly described <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://github.com/react-static/react-static/issues/1328\">here</a>.</p>\n<blockquote>\n<p>TLDR: Images in production build have wrong paths and are not loaded</p>\n</blockquote>\n<p>In the issue, <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://github.com/martonkaufmann\">martnokaufmann</a> provided solution - modifying default <code>file-loader</code> inside <code>node.api.js</code>.</p>\n<p>For me this didn&#39;t worked, however. After some research I discovered that provided solution work only for <code>React-Static</code> without plugins, that modify <code>Webpack</code> loader configuration.</p>\n<h3 id=\"solution\">Solution</h3>\n<p>If you are using plugins that modify <code>Webpack</code> loader configuration, for example <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://www.npmjs.com/package/react-static-plugin-svg\">react-static-plugin-svg</a>, you must do some additional work inside <code>node.api.js</code>. This is required because plugins are loaded before loading <code>node.api.js</code>, so, there, we need to preserve plugin provided configuration also.</p>\n<p>For me the solution looks like this:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> pluginOptions =&gt; ({\n  <span class=\"hljs-attr\">webpack</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">config, { defaultLoaders }</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> svgLoader = config.module.rules[<span class=\"hljs-number\">0</span>].oneOf[<span class=\"hljs-number\">0</span>]\n\n    config.module.rules = [\n      {\n        <span class=\"hljs-attr\">oneOf</span>: [\n          svgLoader,\n          defaultLoaders.jsLoader,\n          defaultLoaders.jsLoaderExt,\n          defaultLoaders.cssLoader,\n          {\n            <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">'url-loader'</span>,\n            <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(jpg|png)$/</span>,\n            <span class=\"hljs-attr\">query</span>: {\n              <span class=\"hljs-attr\">limit</span>: <span class=\"hljs-number\">100</span>,\n              <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'static/[name].[hash:8].[ext]'</span>,\n            },\n          },\n          state.defaultLoaders.fileLoader,\n        ],\n      },\n    ]\n    <span class=\"hljs-keyword\">return</span> config\n  },\n})</code></pre><p>For you, the setup might be different. Main idea is that we need to save all plugin added rules (in my case <code>const svgLoader = config.module.rules[0].oneOf[0]</code>), before modifying <code>rules.oneOf</code> array and apply them there also.</p>\n","created":"2020-01-24T18:08:18.789Z","excerpt":"<p>Today I faced an issue, using <code>React-Static</code>. Issue is clearly described <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://github.com/react-static/react-static/issues/1328\">here</a>.</p>\n<blockquote>\n<p>TLDR: Images in production build have wrong paths and are not loaded</p>\n</blockquote>\n","categories":["React-Static"],"time":"1 min read"}