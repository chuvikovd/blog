{"title":"Creating static blog with Sapper, TailwindCSS and Github pages - Part 3","description":"How to create static blog with Svelte 3, Sapper, TailwindCSS and deploy Github pages - categories and pagination","slug":"creating-static-blog-part-3","html":"<p>This is the third part of the <a class=\"link\" href=\"./blog/creating-static-blog\">tutorial series</a> about creating static blog with Sapper, TailwindCSS and Github pages. In this part we are going to add categories and pagination to our blog.</p>\n<p>First of all, let&#39;s create pagination component:</p>\n<pre><code class=\"hljs language-html\">// src/components/Pagination.svelte\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> prevLink =<span class=\"hljs-literal\">null</span>, nextLink =<span class=\"hljs-literal\">null</span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n{#if prevLink || nextLink}\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"flex justify-between border-t border-black py-4\"</span>&gt;</span>\n    {#if prevLink}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>\n        <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"prefetch\"</span>\n        <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">{prevLink}</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"text-gray-600 hover:text-gray-900 hover:underline\"</span>&gt;</span>\n        Older\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    {/if}\n    {#if nextLink}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>\n        <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"prefetch\"</span>\n        <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">{nextLink}</span>\n        <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ml-auto text-gray-600 hover:text-gray-900 hover:underline\"</span>&gt;</span>\n        Newer\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    {/if}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n{/if}</code></pre><p>And modify <code>Item</code> component:</p>\n<pre><code class=\"hljs language-diff\">&lt;a class=\"block mt-6\" href={`/blog/${post.slug}`} rel=\"prefetch\"&gt;\n<span class=\"hljs-addition\">+ &lt;h4 class=\"font-medium\"&gt;</span>\n<span class=\"hljs-addition\">+   {#each post.categories as category, i}</span>\n<span class=\"hljs-addition\">+     &lt;a</span>\n<span class=\"hljs-addition\">+       rel=\"prefetch\"</span>\n<span class=\"hljs-addition\">+       href={`blog/category/${category}`}</span>\n<span class=\"hljs-addition\">+       class=\"text-gray-600 hover:text-gray-900 hover:underline\"&gt;</span>\n<span class=\"hljs-addition\">+       {category}{i !== post.categories.length - 1 ? ', ' : ''}</span>\n<span class=\"hljs-addition\">+     &lt;/a&gt;</span>\n<span class=\"hljs-addition\">+   {/each}</span>\n<span class=\"hljs-addition\">+ &lt;/h4&gt;</span>\n  &lt;h3</code></pre><p>Then, we need to modify <code>src/routes/blog/_posts.js</code>:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// before</span>\n<span class=\"hljs-keyword\">const</span> { title, description, created, updated } = data\n\n<span class=\"hljs-comment\">// after</span>\n<span class=\"hljs-keyword\">const</span> { title, description, created, updated, categories } = data</code></pre><p>And also include <code>categories</code> in object returned from this function.</p>\n<p>As you might remember, this data comes from our <code>.md</code> files with help of <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://www.npmjs.com/package/gray-matter\">gray-mater</a> package. So, now we can add categories field to all of our posts. For example:</p>\n<pre><code class=\"hljs language-javascript\">---\ncategories: [<span class=\"hljs-string\">'Svelte'</span>, <span class=\"hljs-string\">'Sapper'</span>, <span class=\"hljs-string\">'TailwindCSS'</span>]\n---</code></pre><p>Then, we will create <code>src/utils.js</code> file with one constant and one function:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> POSTS_PER_PAGE = <span class=\"hljs-number\">5</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> getParams = <span class=\"hljs-function\"><span class=\"hljs-params\">params</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> { rest } = params;\n  <span class=\"hljs-keyword\">const</span> category = rest[<span class=\"hljs-number\">0</span>] === <span class=\"hljs-string\">\"category\"</span> ? rest[<span class=\"hljs-number\">1</span>] : <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-keyword\">const</span> page = rest.length === <span class=\"hljs-number\">4</span> ? rest[<span class=\"hljs-number\">3</span>] : category ? <span class=\"hljs-number\">1</span> : rest[<span class=\"hljs-number\">1</span>];\n\n  <span class=\"hljs-keyword\">return</span> { category, page };\n};</code></pre><p>I am pretty sure you got what constant means, but for function, I will explain. We will support blog urls with formats:</p>\n<ul>\n<li><code>/blog</code></li>\n<li><code>/blog/category/{{category}}</code></li>\n<li><code>/blog/page/{{page}}</code></li>\n<li><code>/blog/category/{{category}}/page{{page}}</code></li>\n</ul>\n<p><code>getParams</code> function is desired to take params from url, and extract <code>category</code> and <code>page</code>. The fallback value for <code>category</code> is null, but for <code>page</code> is 1.</p>\n<p>Now, we can start modifying <code>*.json.js</code> and route <code>*.svelte</code> files. Let&#39;s start with simple one, <code>src/routes/blog/latest.json.js</code>:</p>\n<pre><code class=\"hljs language-diff\">  created: post.created,\n<span class=\"hljs-deletion\">- excerpt: post.excerpt</span>\n<span class=\"hljs-addition\">+ excerpt: post.excerpt,</span>\n<span class=\"hljs-addition\">+ categories: post.categories</span>\n};</code></pre><p>Then, <code>src/routes/blog/index.json.js</code>:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> posts <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./_posts.js\"</span>;\n<span class=\"hljs-keyword\">import</span> { POSTS_PER_PAGE } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../../utils.js\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">req, res</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> paginated = posts.slice(<span class=\"hljs-number\">0</span>, POSTS_PER_PAGE);\n\n  <span class=\"hljs-keyword\">const</span> mapped = paginated.map(<span class=\"hljs-function\"><span class=\"hljs-params\">post</span> =&gt;</span> ({\n    <span class=\"hljs-attr\">title</span>: post.title,\n    <span class=\"hljs-attr\">slug</span>: post.slug,\n    <span class=\"hljs-attr\">created</span>: post.created,\n    <span class=\"hljs-attr\">excerpt</span>: post.excerpt,\n    <span class=\"hljs-attr\">categories</span>: post.categories\n  }));\n\n  res.writeHead(<span class=\"hljs-number\">200</span>, {\n    <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"application/json\"</span>\n  });\n\n  res.end(\n    <span class=\"hljs-built_in\">JSON</span>.stringify({\n      <span class=\"hljs-attr\">posts</span>: mapped,\n      <span class=\"hljs-attr\">hasMore</span>: posts.length &gt; POSTS_PER_PAGE\n    })\n  );\n}</code></pre><p>Finally, modify <code>src/routes/blog/index.svelte</code>. <code>context=&quot;module&quot;</code> part:</p>\n<pre><code class=\"hljs language-diff\">&lt;script context=\"module\"&gt;\n  export function preload({ params, query }) {\n    return this.fetch(`blog.json`)\n      .then(r =&gt; r.json())\n<span class=\"hljs-deletion\">-     .then(posts =&gt; {</span>\n<span class=\"hljs-deletion\">-       return { posts };</span>\n<span class=\"hljs-addition\">+     .then(({ posts, hasMore }) =&gt; {</span>\n<span class=\"hljs-addition\">+       return { posts, hasMore };</span>\n      });\n  }\n&lt;/script&gt;</code></pre><p>Also, import <code>Pagination</code> component, expose <code>hasMore</code> prop, and add <code>Pagination</code> to template:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Pagination</span> <span class=\"hljs-attr\">prevLink</span>=<span class=\"hljs-string\">{hasMore</span> ? '<span class=\"hljs-attr\">blog</span>/<span class=\"hljs-attr\">page</span>/<span class=\"hljs-attr\">2</span>' <span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">null</span>} /&gt;</span></code></pre><p>Lastly, we need to add 2 more files to <code>src/routes/blog</code> - <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://github.com/chuvikovd/sapper-blog-tutorial/commit/1ecd0733d40a4dab41445468a8df45124348a2e4#diff-fc9addbb5f278dca41d7914980ca47b2R1\">[...rest].json.js</a> and <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://github.com/chuvikovd/sapper-blog-tutorial/commit/1ecd0733d40a4dab41445468a8df45124348a2e4#diff-8685983ab3933e710ae9668373a08f8dR1\">[...rest].svelte</a>. You can see contents by following links.</p>\n<blockquote>\n<p>Note: before starting to work on this part, I created more example posts in tutorial project using <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"https://jaspervdj.be/lorem-markdownum/\">Lorem Markdownum</a>.</p>\n</blockquote>\n<p>Now, our blog is categorized and properly paginated, give a try by running:</p>\n<pre><code class=\"hljs language-bash\">yarn dev</code></pre><p>and following <a target=\"_blank\" rel=\"nofollow\" class=\"link\" href=\"http://localhost:3000\">http://localhost:3000</a></p>\n<p>That&#39;s all for this part. Stay tuned, more interesting stuff is coming.</p>\n","created":"2020-03-21T14:16:00.485Z","excerpt":"<p>This is the third part of the <a class=\"link\" href=\"./blog/creating-static-blog\">tutorial series</a> about creating static blog with Sapper, TailwindCSS and Github pages. In this part we are going to add categories and pagination to our blog.</p>\n","categories":["Svelte","Sapper","TailwindCSS"],"time":"3 min read"}